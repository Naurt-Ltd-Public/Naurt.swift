// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NaurtSDK
import Combine
import CoreLocation
import CoreMotion
import Foundation
import GenericJSON
import LASwift
import Swift
import UIKit
import Zip
import _Concurrency
import _StringProcessing
public enum NaurtTrackingStatus {
  case FULL
  case READY
  case UNKNOWN
  case AWAITING_VALIDATION
  case FAILING_VALIDATION
  case INVALID_API_KEY
  public static func == (a: NaurtSDK.NaurtTrackingStatus, b: NaurtSDK.NaurtTrackingStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LogLevel {
  case INFO
  case WARNING
  case ERROR
  public static func == (a: NaurtSDK.LogLevel, b: NaurtSDK.LogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func logLevelToString(logLevel: NaurtSDK.LogLevel) -> Swift.String
public protocol NaurtDelegate {
  func didChangeValidated(isValidated: Swift.Bool)
  func didChangeAnalyticsSession(isInSession: Swift.Bool)
  func didUpdateLocation(naurtPoint: NaurtSDK.NaurtLocation?)
  func didChangeJourneyUuid(journeyUuid: Foundation.UUID)
  func didEnterGeofence(id: Foundation.UUID)
  func startAnalyticsSession(metadata: Swift.Encodable, geofences: [NaurtSDK.Geofence]?) throws
  func endAnalyticsSession() throws
  func newPoi(poi: Swift.Encodable) throws
  func errorStream(error: NaurtSDK.NaurtError)
  func onAppClose()
}
public protocol LocationServiceDelegate {
  var user: NaurtSDK.LocationServiceUser? { get set }
  func startUpdatingLocation()
  func stopUpdatingLocation()
}
public protocol LocationServiceUser {
  func newLocationServicePoint(newLocation: CoreLocation.CLLocation)
}
public protocol SensorServiceUser {
  func newSensorServicePoint(newMotion: NaurtSDK.MotionStruct)
}
public protocol SensorServiceDelegate {
  var user: NaurtSDK.SensorServiceUser? { get set }
  func startUpdatingSensors()
  func stopUpdatingSensors()
}
final public class Naurt : NaurtSDK.LocationServiceUser, NaurtSDK.SensorServiceUser {
  final public let deviceUuid: Swift.String
  final public var delegate: NaurtSDK.NaurtDelegate?
  public init(apiKey: Swift.String, noServices: Swift.Bool = false) throws
  final public func newLocationServicePoint(newLocation: CoreLocation.CLLocation)
  final public func newSensorServicePoint(newMotion: NaurtSDK.MotionStruct)
  final public func startAnalyticsSession(metadata: Swift.Encodable, geofences: [NaurtSDK.Geofence]? = nil) throws
  final public func endAnalyticsSession() throws
  final public func onAppClose()
  final public func pointOfInterest(metadata: Swift.Encodable) throws
  final public func getIsValidated() -> Swift.Bool
  final public func getIsInSession() -> Swift.Bool
  final public func getNaurtLocation() -> NaurtSDK.NaurtLocation?
  final public func getJourneyUUID() -> Foundation.UUID?
  final public func distanceBetween(_ a: CoreLocation.CLLocationCoordinate2D) -> Swift.Double
  @objc deinit
}
public enum InitNaurtError : Swift.Error {
  case fileSystem
  case couldNotCreateFirstJourney
  case unknown
  public static func == (a: NaurtSDK.InitNaurtError, b: NaurtSDK.InitNaurtError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum StartNaurtError : Swift.Error {
  case alreadyInAnalyticsSession
  case notInAnalyticsSession
  case notValidated
  case invalidJson
  case noLocationService
  case noSensorService
  case unknown
  case fileSystem
  public static func == (a: NaurtSDK.StartNaurtError, b: NaurtSDK.StartNaurtError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum StopNaurtError : Swift.Error {
  case notRunning
  case uknown
  public static func == (a: NaurtSDK.StopNaurtError, b: NaurtSDK.StopNaurtError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PoiError : Swift.Error {
  case notValidated
  case invalidJson
  public static func == (a: NaurtSDK.PoiError, b: NaurtSDK.PoiError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Geofence : Swift.Identifiable {
  public let id: Foundation.UUID
  public let coordinate: CoreLocation.CLLocationCoordinate2D
  public let alertDistance: Swift.Double
  public typealias ID = Foundation.UUID
}
public enum NaurtError : Swift.Error {
  case fileWriteErrors(Swift.String)
  case savePoiErrors(Swift.String)
}
public struct MotionStruct {
  public init(accel: (Swift.Double, Swift.Double, Swift.Double), gyro: (Swift.Double, Swift.Double, Swift.Double), mag: (Swift.Double, Swift.Double, Swift.Double), timeS: Swift.Double)
}
public struct NaurtLocation : Swift.Codable {
  public var timestamp: Swift.Double
  public var longitude: Swift.Double
  public var latitude: Swift.Double
  public var altitude: Swift.Double
  public var verticalAccuracy: Swift.Double
  public var speed: Swift.Double
  public var speedAccuracy: Swift.Double
  public var course: Swift.Double
  public var courseAccuracy: Swift.Double
  public var horizontalAccuracy: Swift.Double
  public var horizontalCovariance: Swift.Double
  public var source: NaurtSDK.Source
  public func toString() -> Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum Source : Swift.String, Swift.Codable {
  case NaurtFull
  case NaurtSensor
  case Gnss
  case Unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct rawLocation {
  public var latitude: Swift.Double
  public var longitude: Swift.Double
  public var timestamp: Swift.UInt64
}
public func distanceBetween(_ a: CoreLocation.CLLocationCoordinate2D, _ b: CoreLocation.CLLocationCoordinate2D) -> Swift.Double
extension NaurtSDK.NaurtTrackingStatus : Swift.Equatable {}
extension NaurtSDK.NaurtTrackingStatus : Swift.Hashable {}
extension NaurtSDK.LogLevel : Swift.Equatable {}
extension NaurtSDK.LogLevel : Swift.Hashable {}
extension NaurtSDK.InitNaurtError : Swift.Equatable {}
extension NaurtSDK.InitNaurtError : Swift.Hashable {}
extension NaurtSDK.StartNaurtError : Swift.Equatable {}
extension NaurtSDK.StartNaurtError : Swift.Hashable {}
extension NaurtSDK.StopNaurtError : Swift.Equatable {}
extension NaurtSDK.StopNaurtError : Swift.Hashable {}
extension NaurtSDK.PoiError : Swift.Equatable {}
extension NaurtSDK.PoiError : Swift.Hashable {}
extension NaurtSDK.Source : Swift.Equatable {}
extension NaurtSDK.Source : Swift.Hashable {}
extension NaurtSDK.Source : Swift.RawRepresentable {}
