// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NaurtSDK
import Combine
import CoreLocation
import CoreMotion
import Foundation
import GenericJSON
import LASwift
import Swift
import UIKit
import Zip
import _Concurrency
import _StringProcessing
@objc public enum NaurtMovement : Swift.Int, Swift.Codable {
  case na = 0
  case stationary = 1
  case onFoot = 2
  case vehicleMotion = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum InitNaurtError : Swift.Int, Swift.Error, Foundation.LocalizedError {
  case fileSystem = 0
  case couldNotCreateFirstJourney = 1
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum StartNaurtError : Swift.Int, Swift.Error, Foundation.LocalizedError {
  case alreadyInAnalyticsSession = 0
  case notValidated = 1
  case invalidJson = 2
  case noLocationService = 3
  case noSensorService = 4
  case fileSystem = 5
  case geofencingRequested = 6
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum StopNaurtError : Swift.Int, Swift.Error, Foundation.LocalizedError {
  case notRunning = 0
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PoiError : Swift.Int, Swift.Error, Foundation.LocalizedError {
  case notValidated = 0
  case invalidJson = 1
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum LogLevel {
  case INFO
  case WARNING
  case ERROR
  public static func == (a: NaurtSDK.LogLevel, b: NaurtSDK.LogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func logLevelToString(logLevel: NaurtSDK.LogLevel) -> Swift.String
@objc public class Geofence : ObjectiveC.NSObject {
  final public let id: Swift.String
  final public let coordinate: NaurtSDK.Location2D
  final public let alertDistance: Swift.Double
  public init(id: Swift.String, coordinate: NaurtSDK.Location2D, alertDistance: Swift.Double)
  @objc deinit
}
@objc public class Location2D : ObjectiveC.NSObject {
  final public let latitude: Swift.Double
  final public let longitude: Swift.Double
  public init(latitude: Swift.Double, longitude: Swift.Double)
  @objc deinit
}
@objc public protocol NaurtDelegate : ObjectiveC.NSObject {
  @objc func didUpdateLocation(naurtPoint: NaurtSDK.NaurtLocation?)
  @objc func onAppClose()
  @objc optional func didChangeValidated(isValidated: Swift.Bool)
  @objc optional func didChangeAnalyticsSession(isInSession: Swift.Bool)
  @objc optional func didChangeJourneyUuid(journeyUuid: Swift.String)
  @objc optional func didEnterGeofence(id: Swift.String)
  @objc optional func didLeaveGeofence(id: Swift.String)
  @objc optional func startAnalyticsSession(metadata: Foundation.NSDictionary, geofences: [NaurtSDK.Geofence]?) throws
  @objc optional func endAnalyticsSession() throws
  @objc optional func newPoi(poi: Foundation.NSDictionary) throws
  @objc optional func anomalyAltert(alert: NaurtSDK.AnomalyAlert)
}
@objc public protocol LocationServiceDelegate {
  @objc var user: NaurtSDK.LocationServiceUser? { get set }
  @objc func startUpdatingLocation()
  @objc func stopUpdatingLocation()
}
@objc public protocol LocationServiceUser {
  @objc func newLocationServicePoint(newLocation: CoreLocation.CLLocation)
}
@objc public protocol SensorServiceUser {
  @objc func newSensorServicePoint(newMotion: NaurtSDK.MotionContainer)
}
@objc public protocol SensorServiceDelegate {
  @objc var user: NaurtSDK.SensorServiceUser? { get set }
  @objc func startUpdatingSensors()
  @objc func stopUpdatingSensors()
}
@objc final public class Naurt : ObjectiveC.NSObject, NaurtSDK.LocationServiceUser, NaurtSDK.SensorServiceUser {
  @objc final public var delegate: NaurtSDK.NaurtDelegate?
  @objc public init(apiKey: Swift.String, noServices: Swift.Bool = false, timeAnomaly: Swift.Double = 10.0, distanceAnomaly: Swift.Double = 100.0) throws
  @objc final public func newLocationServicePoint(newLocation: CoreLocation.CLLocation)
  @objc final public func newSensorServicePoint(newMotion: NaurtSDK.MotionContainer)
  @objc final public func startAnalyticsSession(metadata: Foundation.NSDictionary, geofences: [NaurtSDK.Geofence]? = nil) throws
  @objc final public func endAnalyticsSession() throws
  @objc final public func onAppClose()
  @objc final public func pointOfInterest(metadata: Foundation.NSDictionary) throws
  @objc final public func getIsValidated() -> Swift.Bool
  @objc final public func getIsInSession() -> Swift.Bool
  @objc final public func getNaurtLocation() -> NaurtSDK.NaurtLocation?
  @objc final public func getJourneyUUID() -> Swift.String
  @objc final public func distanceBetween(_ a: NaurtSDK.Location2D) -> Swift.Double
  @objc deinit
}
@objc public class AnomalyAlert : ObjectiveC.NSObject {
  final public let temporalAnomaly: NaurtSDK.TemporalAnomaly?
  final public let spatialAnomaly: NaurtSDK.SpacialAnomaly?
  public init(temporalAnomaly: NaurtSDK.TemporalAnomaly?, spatialAnomaly: NaurtSDK.SpacialAnomaly?)
  @objc deinit
}
@objc public class TemporalAnomaly : ObjectiveC.NSObject {
  final public let lastTime: Swift.Double
  final public let thisTime: Swift.Double
  final public let timeDelta: Swift.Double
  public init(lastTime: Swift.Double, thisTime: Swift.Double, timeDelta: Swift.Double)
  @objc deinit
}
@objc public class SpacialAnomaly : ObjectiveC.NSObject {
  final public let lastPosition: NaurtSDK.Location2D
  final public let thisPosition: NaurtSDK.Location2D
  final public let distanceDelta: Swift.Double
  public init(lastPosition: NaurtSDK.Location2D, thisPosition: NaurtSDK.Location2D, distanceDelta: Swift.Double)
  @objc deinit
}
@objc public class MotionContainer : ObjectiveC.NSObject {
  public init(accel: (Swift.Double, Swift.Double, Swift.Double), gyro: (Swift.Double, Swift.Double, Swift.Double), mag: (Swift.Double, Swift.Double, Swift.Double), timeS: Swift.Double)
  @objc deinit
}
@objc public class NaurtLocation : ObjectiveC.NSObject, Swift.Codable {
  public var timestamp: Swift.Double
  public var longitude: Swift.Double
  public var latitude: Swift.Double
  public var altitude: Swift.Double
  public var verticalAccuracy: Swift.Double
  public var speed: Swift.Double
  public var speedAccuracy: Swift.Double
  public var course: Swift.Double
  public var courseAccuracy: Swift.Double
  public var horizontalAccuracy: Swift.Double
  public var horizontalCovariance: Swift.Double
  public var source: NaurtSDK.Source
  public var motionType: NaurtSDK.NaurtMovement
  public init(timestamp: Swift.Double, longitude: Swift.Double, latitude: Swift.Double, altitude: Swift.Double, verticalAccuracy: Swift.Double, speed: Swift.Double, speedAccuracy: Swift.Double, course: Swift.Double, courseAccuracy: Swift.Double, horizontalAccuracy: Swift.Double, horizontalCovariance: Swift.Double, source: NaurtSDK.Source, motionType: NaurtSDK.NaurtMovement)
  public func toString() -> Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public enum Source : Swift.Int {
  case NaurtFull
  case NaurtSensor
  case Gnss
  public init?(rawValue: Swift.String)
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension NaurtSDK.Source : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct rawLocation {
  public var latitude: Swift.Double
  public var longitude: Swift.Double
  public var timestamp: Swift.UInt64
}
public func distanceBetween(_ a: NaurtSDK.Location2D, _ b: NaurtSDK.Location2D) -> Swift.Double
extension NaurtSDK.NaurtMovement : Swift.Equatable {}
extension NaurtSDK.NaurtMovement : Swift.Hashable {}
extension NaurtSDK.NaurtMovement : Swift.RawRepresentable {}
extension NaurtSDK.InitNaurtError : Swift.Equatable {}
extension NaurtSDK.InitNaurtError : Swift.Hashable {}
extension NaurtSDK.InitNaurtError : Swift.RawRepresentable {}
extension NaurtSDK.StartNaurtError : Swift.Equatable {}
extension NaurtSDK.StartNaurtError : Swift.Hashable {}
extension NaurtSDK.StartNaurtError : Swift.RawRepresentable {}
extension NaurtSDK.StopNaurtError : Swift.Equatable {}
extension NaurtSDK.StopNaurtError : Swift.Hashable {}
extension NaurtSDK.StopNaurtError : Swift.RawRepresentable {}
extension NaurtSDK.PoiError : Swift.Equatable {}
extension NaurtSDK.PoiError : Swift.Hashable {}
extension NaurtSDK.PoiError : Swift.RawRepresentable {}
extension NaurtSDK.LogLevel : Swift.Equatable {}
extension NaurtSDK.LogLevel : Swift.Hashable {}
extension NaurtSDK.Source : Swift.Equatable {}
extension NaurtSDK.Source : Swift.Hashable {}
extension NaurtSDK.Source : Swift.RawRepresentable {}
