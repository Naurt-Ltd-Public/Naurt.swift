// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios13.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NaurtSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Accelerate
import Combine
import CoreLocation
import CoreMotion
import Foundation
import GenericJSON
import LASwift
@_exported import NaurtSDK
import Swift
import UIKit
import ZIPFoundation
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AnomalyAlert : ObjectiveC.NSObject {
  public var temporalAnomaly: NaurtSDK.TemporalAnomaly?
  public var spatialAnomaly: NaurtSDK.SpacialAnomaly?
  @objc deinit
}
@objc public class TemporalAnomaly : ObjectiveC.NSObject {
  final public let lastTime: Swift.Double
  final public let thisTime: Swift.Double
  final public let timeDelta: Swift.Double
  public init(lastTime: Swift.Double, thisTime: Swift.Double, timeDelta: Swift.Double)
  @objc deinit
}
@objc public class SpacialAnomaly : ObjectiveC.NSObject {
  final public let lastPosition: NaurtSDK.Location2D
  final public let thisPosition: NaurtSDK.Location2D
  final public let distanceDelta: Swift.Double
  public init(lastPosition: NaurtSDK.Location2D, thisPosition: NaurtSDK.Location2D, distanceDelta: Swift.Double)
  @objc deinit
}
@objc public protocol NaurtDelegate {
  @objc func didUpdateLocation(naurtPoint: NaurtSDK.NaurtLocation)
  @objc func onAppClose()
  @objc optional func didChangeValidated(isValidated: Swift.Bool)
  @objc optional func didInteractWithGeofence(events: Foundation.NSDictionary)
  @objc optional func anomalyAlert(alert: NaurtSDK.AnomalyAlert)
  @objc optional func errorStream(errorInformation: Swift.String)
}
@objc public protocol LocationServiceDelegate {
  @objc var user: (any NaurtSDK.LocationServiceUser)? { get set }
  @objc func startUpdatingLocation()
  @objc func stopUpdatingLocation()
}
@objc public protocol LocationServiceUser {
  @objc func newLocationServicePoint(newLocation: CoreLocation.CLLocation)
}
@objc public protocol SensorServiceUser {
  @objc func newSensorServicePoint(newMotion: NaurtSDK.MotionContainer)
}
@objc public protocol SensorServiceDelegate {
  @objc var user: (any NaurtSDK.SensorServiceUser)? { get set }
  @objc func startUpdatingSensors()
  @objc func stopUpdatingSensors()
}
@objc final public class Naurt : ObjectiveC.NSObject {
  @objc final public var delegate: (any NaurtSDK.NaurtDelegate)?
  @objc public init(apiKey: Swift.String, metadata: Foundation.NSDictionary?, noServices: Swift.Bool = false, timeAnomaly: Swift.Double = 10.0, distanceAnomaly: Swift.Double = 100.0) throws
  @objc final public func newLocationServicePoint(newLocation: CoreLocation.CLLocation)
  @objc final public func newSensorServicePoint(newMotion: NaurtSDK.MotionContainer)
  @objc final public func updateGeofences(geo: [NaurtSDK.Geofence])
  @objc final public func updateMetadata(metadata: Foundation.NSDictionary?) throws
  @objc final public func onAppClose()
  @objc final public func pointOfInterest(metadata: Foundation.NSDictionary) throws
  @objc final public func getIsValidated() -> Swift.Bool
  @objc final public func getNaurtLocation() -> NaurtSDK.NaurtLocation
  @objc final public func getJourneyUUID() -> Swift.String
  @objc final public func getDeviceUUID() -> Swift.String
  @objc final public func distanceBetween(_ a: NaurtSDK.Location2D) -> Swift.Double
  @objc final public func setEmissionFrequency(frequency: Foundation.NSNumber?)
  final public func setEmissionFrequency(_ frequency: Swift.Double?)
  @objc deinit
}
@objc public class Geofence : ObjectiveC.NSObject {
  final public let id: Swift.String
  final public let coordinate: NaurtSDK.Location2D
  final public let alertDistance: Swift.Double
  public init(id: Swift.String, coordinate: NaurtSDK.Location2D, alertDistance: Swift.Double)
  @objc deinit
}
@objc public enum GeofenceActivityType : Swift.Int {
  case Enter = 0
  case Leave = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class Location2D : ObjectiveC.NSObject {
  final public let latitude: Swift.Double
  final public let longitude: Swift.Double
  public init(latitude: Swift.Double, longitude: Swift.Double)
  @objc deinit
}
public func distanceBetween(_ a: NaurtSDK.Location2D, _ b: NaurtSDK.Location2D) -> Swift.Double
@objc public class NaurtLocation : ObjectiveC.NSObject, Swift.Codable {
  public var timestamp: Swift.Double
  public var longitude: Swift.Double
  public var latitude: Swift.Double
  public var altitude: Swift.Double
  public var verticalAccuracy: Swift.Double
  public var speed: Swift.Double
  public var speedAccuracy: Swift.Double
  public var course: Swift.Double
  public var courseAccuracy: Swift.Double
  public var horizontalAccuracy: Swift.Double
  public var horizontalCovariance: Swift.Double
  public var source: NaurtSDK.Source
  public var motionType: NaurtSDK.Movement
  public init(timestamp: Swift.Double, longitude: Swift.Double, latitude: Swift.Double, altitude: Swift.Double, verticalAccuracy: Swift.Double, speed: Swift.Double, speedAccuracy: Swift.Double, course: Swift.Double, courseAccuracy: Swift.Double, horizontalAccuracy: Swift.Double, horizontalCovariance: Swift.Double, source: NaurtSDK.Source, motionType: NaurtSDK.Movement)
  public func toString(published: Swift.Bool) -> Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum Source : Swift.Int {
  case NaurtFull
  case NaurtSensor
  case Gnss
  public init?(rawValue: Swift.String)
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension NaurtSDK.Source : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct rawLocation {
  public var latitude: Swift.Double
  public var longitude: Swift.Double
  public var timestamp: Swift.UInt64
}
@objc public enum Movement : Swift.Int, Swift.Codable {
  case Unknown = 0
  case Walking = 1
  case Vehicle = 2
  case Stationary = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum InitNaurtError : Swift.Int, Swift.Error, Foundation.LocalizedError {
  case fileSystem = 0
  case couldNotCreateFirstJourney = 1
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum UpdateMetadataError : Swift.Int, Swift.Error, Foundation.LocalizedError {
  case invalidJson = 0
  case noLocationService = 1
  case noSensorService = 2
  case fileSystem = 3
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PoiError : Swift.Int, Swift.Error, Foundation.LocalizedError {
  case notValidated = 0
  case invalidJson = 1
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class MotionContainer : ObjectiveC.NSObject {
  public init(accel: (Swift.Double, Swift.Double, Swift.Double), gyro: (Swift.Double, Swift.Double, Swift.Double), mag: (Swift.Double, Swift.Double, Swift.Double)?, timeS: Swift.Double)
  @objc deinit
}
extension NaurtSDK.GeofenceActivityType : Swift.Equatable {}
extension NaurtSDK.GeofenceActivityType : Swift.Hashable {}
extension NaurtSDK.GeofenceActivityType : Swift.RawRepresentable {}
extension NaurtSDK.Source : Swift.Equatable {}
extension NaurtSDK.Source : Swift.Hashable {}
extension NaurtSDK.Source : Swift.RawRepresentable {}
extension NaurtSDK.Movement : Swift.Equatable {}
extension NaurtSDK.Movement : Swift.Hashable {}
extension NaurtSDK.Movement : Swift.RawRepresentable {}
extension NaurtSDK.InitNaurtError : Swift.Equatable {}
extension NaurtSDK.InitNaurtError : Swift.Hashable {}
extension NaurtSDK.InitNaurtError : Swift.RawRepresentable {}
extension NaurtSDK.UpdateMetadataError : Swift.Equatable {}
extension NaurtSDK.UpdateMetadataError : Swift.Hashable {}
extension NaurtSDK.UpdateMetadataError : Swift.RawRepresentable {}
extension NaurtSDK.PoiError : Swift.Equatable {}
extension NaurtSDK.PoiError : Swift.Hashable {}
extension NaurtSDK.PoiError : Swift.RawRepresentable {}
