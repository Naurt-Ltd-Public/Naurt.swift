// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NaurtSDK
import Accelerate
import Combine
import CoreLocation
import CoreMotion
import Dispatch
import Foundation
@_exported import NaurtSDK
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import simd
@objc public class POIManager : ObjectiveC.NSObject {
  public init(apiKey: Swift.String)
  public func putPoi(latitude: Swift.Double, longitude: Swift.Double, poiType: Swift.String, metadata: Foundation.NSDictionary?, address_json: NaurtSDK.AddressJson?, address_string: Swift.String?, completion: @escaping ([Swift.String : Any]?, Swift.Int?, NaurtSDK.PoiError?, Swift.String?) -> Swift.Void)
  public func getPoi(poiId: Swift.String?, latitude: Swift.Double?, longitude: Swift.Double?, poiTypes: [Swift.String]?, metadata: Foundation.NSDictionary?, distanceFilter: Swift.Double?, address_json: NaurtSDK.AddressJson?, address_string: Swift.String?, additional_results: Swift.Bool?, completion: @escaping ([Swift.String : Any]?, Swift.Int?, NaurtSDK.PoiError?, Swift.String?) -> Swift.Void)
  public func deletePoi(poiIds: [Swift.String], completion: @escaping ([Swift.String : Any]?, Swift.Int?, NaurtSDK.PoiError?, Swift.String?) -> Swift.Void)
  @objc deinit
}
public struct AddressJson : Swift.Codable, Swift.Equatable {
  public init(unit: Swift.String?, house_name: Swift.String?, street_number: Swift.String?, street: Swift.String?, city: Swift.String?, county: Swift.String?, state: Swift.String?, country: Swift.String?, postalcode: Swift.String?)
  public static func == (a: NaurtSDK.AddressJson, b: NaurtSDK.AddressJson) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public enum PoiError : Swift.Int, Swift.Error, Foundation.LocalizedError {
  case invalidJson = 0
  case maxRetries = 1
  case unknown = 2
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Movement : Swift.Int {
  case Unknown = 0
  case Walking = 1
  case Vehicle = 2
  case Stationary = 3
  public init?(rawValue: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension NaurtSDK.Movement : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public enum Source : Swift.Int {
  case NaurtFull = 0
  case NaurtSensor = 1
  case Gnss = 2
  public init?(rawValue: Swift.String)
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension NaurtSDK.Source : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AnomalyAlert : ObjectiveC.NSObject {
  public var temporalAnomaly: NaurtSDK.TemporalAnomaly?
  public var spatialAnomaly: NaurtSDK.SpatialAnomaly?
  @objc deinit
}
@objc public class TemporalAnomaly : ObjectiveC.NSObject {
  final public let lastTime: Swift.Double
  final public let thisTime: Swift.Double
  final public let timeDelta: Swift.Double
  public init(lastTime: Swift.Double, thisTime: Swift.Double, timeDelta: Swift.Double)
  @objc deinit
}
@objc public class SpatialAnomaly : ObjectiveC.NSObject {
  final public let lastPosition: NaurtSDK.Location2D
  final public let thisPosition: NaurtSDK.Location2D
  final public let distanceDelta: Swift.Double
  public init(lastPosition: NaurtSDK.Location2D, thisPosition: NaurtSDK.Location2D, distanceDelta: Swift.Double)
  @objc deinit
}
infix operator .* : MultiplicationPrecedence
@objc public protocol NaurtDelegate {
  @objc func didUpdateLocation(_ naurtPoint: NaurtSDK.NaurtLocation)
  @objc func onAppClose()
  @objc optional func didChangeValidated(_ isValidated: Swift.Bool)
  @objc optional func didInteractWithGeofence(_ events: Foundation.NSDictionary)
  @objc optional func anomalyAlert(_ alert: NaurtSDK.AnomalyAlert)
  @objc optional func errorStream(_ errorInformation: Swift.String)
  @objc optional func didChangeAuthorisationStatus(_ status: CoreLocation.CLAuthorizationStatus)
  @objc optional func didChangeAccuracyAuthorisation(_ status: CoreLocation.CLAccuracyAuthorization)
}
@objc final public class NaurtLocationManager : ObjectiveC.NSObject {
  @objc final public var delegate: (any NaurtSDK.NaurtDelegate)?
  @objc public init(apiKey: Swift.String, addressString: Swift.String?, metadata: Foundation.NSDictionary?, timeAnomaly: Swift.Double = 10.0, distanceAnomaly: Swift.Double = 100.0)
  public init(apiKey: Swift.String, addressJson: NaurtSDK.AddressJson?, metadata: Foundation.NSDictionary?, timeAnomaly: Swift.Double = 10.0, distanceAnomaly: Swift.Double = 100.0)
  @objc final public func updateGeofences(geo: [NaurtSDK.Geofence])
  final public func newDestination(addressJson: NaurtSDK.AddressJson?, metadata: Foundation.NSDictionary?)
  @objc final public func newDestination(addressString: Swift.String?, metadata: Foundation.NSDictionary?)
  @objc final public func onAppClose()
  @objc final public func getIsValidated() -> Swift.Bool
  @objc final public func getNaurtLocation() -> NaurtSDK.NaurtLocation?
  @objc final public func getJourneyUUID() -> Swift.String
  @objc final public func getDeviceUUID() -> Swift.String
  @objc final public func getAuthorisationStatus() -> CoreLocation.CLAuthorizationStatus
  @objc final public func getAccuracyAuthorisation() -> CoreLocation.CLAccuracyAuthorization
  @objc final public func getIsBlocked() -> Swift.Bool
  final public func requestAlwaysAuthorization()
  final public func requestWhenInUseAuthorization()
  final public func distanceBetween(_ a: NaurtSDK.Location2D) -> Swift.Double?
  @objc final public func distanceBetween(_ a: NaurtSDK.Location2D) -> Foundation.NSNumber?
  @objc final public func setEmissionFrequency(frequency: Foundation.NSNumber?)
  final public func setEmissionFrequency(_ frequency: Swift.Double?)
  @objc deinit
}
@objc public class NaurtLocation : ObjectiveC.NSObject, Swift.Codable {
  public var timestamp: Swift.Double
  public var longitude: Swift.Double
  public var latitude: Swift.Double
  public var altitude: Swift.Double
  public var verticalAccuracy: Swift.Double
  public var speed: Swift.Double
  public var speedAccuracy: Swift.Double
  public var course: Swift.Double
  public var courseAccuracy: Swift.Double
  public var horizontalAccuracy: Swift.Double
  public var horizontalCovariance: Swift.Double
  public var source: NaurtSDK.Source
  public var motionType: NaurtSDK.Movement
  public init(timestamp: Swift.Double, longitude: Swift.Double, latitude: Swift.Double, altitude: Swift.Double, verticalAccuracy: Swift.Double, speed: Swift.Double, speedAccuracy: Swift.Double, course: Swift.Double, courseAccuracy: Swift.Double, horizontalAccuracy: Swift.Double, horizontalCovariance: Swift.Double, source: NaurtSDK.Source, motionType: NaurtSDK.Movement)
  public func toString(published: Swift.Bool, applicationState: Swift.String) -> Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class Location2D : ObjectiveC.NSObject {
  final public let latitude: Swift.Double
  final public let longitude: Swift.Double
  public init(latitude: Swift.Double, longitude: Swift.Double)
  @objc deinit
}
@objc public class Geofence : ObjectiveC.NSObject {
  final public let id: Swift.String
  final public let coordinate: NaurtSDK.Location2D
  final public let alertDistance: Swift.Double
  public init(id: Swift.String, coordinate: NaurtSDK.Location2D, alertDistance: Swift.Double)
  @objc deinit
}
@objc public enum GeofenceActivityType : Swift.Int {
  case Enter = 0
  case Leave = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class Karney : ObjectiveC.NSObject {
  @objc public func distanceBetween(_ a: NaurtSDK.Location2D, _ b: NaurtSDK.Location2D) -> Swift.Double
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MotionContainer : ObjectiveC.NSObject {
  public init(accel: (Swift.Double, Swift.Double, Swift.Double), gyro: (Swift.Double, Swift.Double, Swift.Double), mag: (Swift.Double, Swift.Double, Swift.Double)?, timeS: Swift.Double)
  @objc deinit
}
extension NaurtSDK.PoiError : Swift.Equatable {}
extension NaurtSDK.PoiError : Swift.Hashable {}
extension NaurtSDK.PoiError : Swift.RawRepresentable {}
extension NaurtSDK.Movement : Swift.Equatable {}
extension NaurtSDK.Movement : Swift.Hashable {}
extension NaurtSDK.Movement : Swift.RawRepresentable {}
extension NaurtSDK.Source : Swift.Equatable {}
extension NaurtSDK.Source : Swift.Hashable {}
extension NaurtSDK.Source : Swift.RawRepresentable {}
extension NaurtSDK.GeofenceActivityType : Swift.Equatable {}
extension NaurtSDK.GeofenceActivityType : Swift.Hashable {}
extension NaurtSDK.GeofenceActivityType : Swift.RawRepresentable {}
